version: 2.1

executors:
  cloudsdk_executor:
    docker:
      - image: google/cloud-sdk
    working_directory: ~/workspace
  php_executor:
    docker:
      - image: php:8.0-apache-buster
    working_directory: ~/workspace

jobs:
  setup_job:
    executor: php_executor
    steps:
      - checkout
      - run:
          name: setup php_executor
          command: |
            apt-get update
            apt-get install -y git
      - restore_cache:
          name: restore composer cache
          keys:
            - composer-cache-v1-{{ .Branch }}-{{ checksum "src/composer.json" }}
      - run:
          name: composer install
          command: |
            php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
            php -r "if (hash_file('sha384', 'composer-setup.php') === '55ce33d7678c5a611085589f1f3ddf8b3c52d662cd01d4ba75c0ee0459970c2200a51f492d557530c71c15d8dba01eae') { echo 'Installer verified'; } else { echo 'Installer corrupt'; unlink('composer-setup.php'); } echo PHP_EOL;"
            php composer-setup.php
            php -r "unlink('composer-setup.php');"
            mv composer.phar /usr/local/bin/composer
            composer --version
            cd src
            pwd
            composer config discard-changes true
            composer install -n --prefer-dist --no-dev
      - save_cache:
          name: save composer cache
          paths:
            - vendor
          key: composer-cache-v1-{{ .Branch }}-{{ checksum "src/composer.json" }}
      - restore_cache:
          name: restore npm cache
          keys:
            - npm-cache-v1-{{ .Branch }}-{{ checksum "src/package.json" }}
      - run:
          name: npm install
          command: |
            apt-get install -y npm nodejs
            npm install -g n
            n stable
            apt-get purge -y npm nodejs
            export N_PREFIX=$HOME/.n
            export PATH=$N_PREFIX/bin:$PATH
            npm -v
            cd src
            npm install
            npm run prod
      - save_cache:
          name: save npm cache
          paths:
            - node_modules
          key: npm-cache-v1-{{ .Branch }}-{{ checksum "src/package.json" }}
      - persist_to_workspace:
          root: ~/workspace
          paths:
            - ./*

  build_job:
    executor: cloudsdk_executor
    steps:
      - attach_workspace:
          at: ~/workspace
      - setup_remote_docker
      - run:
          name: setup cloudsdk_executor
          command: |
            apt-get update
            apt-get install -y git gettext
      - run:
          name: change laravel directory permission
          command: |
            cd src
            chmod 777 -R storage
            chmod 777 -R bootstrap/cache
      - run:
          name: set env
          command: |
            cd src
            envsubst < .env.prd > .env
      - run:
          name: gcloud auth
          command: |
            cd src
            echo ${GKE_SERVICE_ACCOUNT_KEY} > $HOME/allabout-kubernetes-service-account.json
            gcloud auth activate-service-account --key-file $HOME/allabout-kubernetes-service-account.json
            gcloud auth configure-docker us-east1-docker.pkg.dev
      - run:
          name: build artifact and save artifact
          command: |
            docker build --file=cd/${PRO_APP_ENV}/php/Dockerfile \
              --build-arg APP_ENV=${PRO_APP_ENV} \
              --build-arg APP_PATH=/var/www/${CIRCLE_PROJECT_REPONAME} \
              -t ${CIRCLE_PROJECT_REPONAME} .
            docker tag ${CIRCLE_PROJECT_REPONAME} us-east1-docker.pkg.dev/o-taiji/${CIRCLE_PROJECT_REPONAME}/app:${CIRCLE_SHA1}
            docker push us-east1-docker.pkg.dev/o-taiji/${CIRCLE_PROJECT_REPONAME}/app:${CIRCLE_SHA1}
            docker tag ${CIRCLE_PROJECT_REPONAME} us-east1-docker.pkg.dev/o-taiji/${CIRCLE_PROJECT_REPONAME}/app:latest
            docker push us-east1-docker.pkg.dev/o-taiji/${CIRCLE_PROJECT_REPONAME}/app:latest
      - persist_to_workspace:
          root: ~/workspace
          paths:
            - ./*

  deploy_job:
    executor: cloudsdk_executor
    steps:
      - attach_workspace:
          at: ~/workspace
      - setup_remote_docker
      - run:
          name: setup cloudsdk_executor
          command: |
            apt-get update
            apt-get install -y git gettext
      - run:
          name: gcloud auth
          command: |
            cd src
            echo ${GKE_SERVICE_ACCOUNT_KEY} > $HOME/allabout-kubernetes-service-account.json
            gcloud auth activate-service-account --key-file $HOME/allabout-kubernetes-service-account.json
            gcloud auth configure-docker us-east1-docker.pkg.dev
      - run:
          name: gcloud config
          command: |
            gcloud config set project o-taiji
            gcloud config set compute/region us-west1
            gcloud container clusters get-credentials ${CIRCLE_PROJECT_REPONAME}
      - run:
          name: add environment
          command: |
            echo "export DEPLOYMENT_CONTAINER_IMAGE=us-east1-docker.pkg.dev/o-taiji/${CIRCLE_PROJECT_REPONAME}/app:${CIRCLE_SHA1}" >> $BASH_ENV
            echo "export CERT_DOMAIN=circleci.ogawa.allabout.oootaiji.com" >> $BASH_ENV
            echo "export INGRESS_STATIC_IP=${CIRCLE_PROJECT_REPONAME}-ip" >> $BASH_ENV
            echo "export NAMESPACE=${CIRCLE_PROJECT_REPONAME}" >> $BASH_ENV
            source $BASH_ENV
            echo ${DEPLOYMENT_CONTAINER_IMAGE}
            echo ${CERT_DOMAIN}
            echo ${INGRESS_STATIC_IP}
            echo ${NAMESPACE}
      - run:
          name: exec deploy
          command: |
            cd cd/${PRO_APP_ENV}/manifest
            envsubst < namespace.yaml > $HOME/namespace.yaml
            envsubst < service.yaml > $HOME/service.yaml
            envsubst < deployment.yaml > $HOME/deployment.yaml
            envsubst < ingress.yaml > $HOME/ingress.yaml
            envsubst < cert.yaml > $HOME/cert.yaml
            envsubst < pod-disruption-budget.yaml > $HOME/pod-disruption-budget.yaml
            kubectl apply -f $HOME/cert.yaml
            kubectl apply -f $HOME/deployment.yaml
            kubectl apply -f $HOME/service.yaml
            kubectl apply -f $HOME/ingress.yaml
            kubectl apply -f $HOME/pod-disruption-budget.yaml
      - run:
          name: confirm deploy
          command: |
            kubectl rollout status deployment app
workflows:
  deploy_workflow:
    jobs:
      - setup_job
      - build_job:
          requires:
            - setup_job
      - deploy_job:
          requires:
            - build_job
          filters:
            branches:
              only: main
